openapi: 3.0.0
info:
  title: Example API
  version: 1.0.0
  description: Example API with Swagger
servers:
  - url: http://localhost:3000
paths:
  /users:
    get:
      summary: Retrieve a list of users
      tags:
        - Users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        description: User object that needs to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    /{id}:
      get:
        summary: Get a user by ID
        tags:
          - Users
        parameters:
          - in: path
            name: id
            required: true
            description: Numeric ID of the user to get
            schema:
              type: integer
        responses:
          '200':
            description: User object with the specified ID
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
      put:
        summary: Update a user by ID
        tags:
          - Users
        parameters:
          - in: path
            name: id
            required: true
            description: Numeric ID of the user to update
            schema:
              type: integer
        requestBody:
          description: User object that needs to be updated
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdateDto'
        responses:
          '200':
            description: User object with the specified ID after update
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
      delete:
        summary: Delete a user by email
        tags:
          - Users
        parameters:
          - in: path
            name: id
            required: true
            description: Numeric ID of the user to delete
            schema:
              type: integer
        responses:
          '200':
            description: User object with the specified ID after delete
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
  /{id}/roles:
    get:
      summary: Get a list of roles for a user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID of the user to get roles for
          schema:
            type: integer
      responses:
        '200':
          description: List of roles for the user with the specified ID
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
    post:
      summary: Add a role to a user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID of the user to add the role to
          schema:
        type: integer
  requestBody:
    description: Role object to add to the user
    required: true
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/Role'
  responses:
    '200':
      description: Role added to the user with the specified ID
      content:
        application/json:
          schema:
           $ref: '#/components/schemas/User'/{id}/roles/{roleId}:
